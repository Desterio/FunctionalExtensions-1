<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using FunctionalExtensions.Currying;

namespace FunctionalExtensions.Transform
{
    public static class FunctionResultToOptionTransformExtensions
    {
	<# 
	for(var i = 1; i <= 16; i++)
	{ 
        var t = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
        var xarg = String.Format("({0})", String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x)));
	#>
    public static Func<<#= t #>Option<TResult>> ReturnOption<<#= t #>TResult>(this Func<<#= t #>TResult> func)
        {
            return <#= xarg #> => Option.Return(func<#= xarg #>);
        }

	<# } #>
}

	public static class FunctionResultNoneOnExceptionTransformExtensions
    {
		public static Func<T, Option<TResult>> OnExceptionNone<T, TResult>(this Func<T, Option<TResult>> func)
        {
            return x =>
            {
                try
                {
                    return func(x);
                }
                catch (Exception)
                {
                    return Option.None<TResult>();
                }
            };
        }

	<# 
	for(var i = 2; i < 16; i++)
	{ 
        var t = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
        var xarg = String.Format("({0})", String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x)));
		var xarg2 = String.Join("", Enumerable.Range(1, i - 1).Select(x => String.Format("(x{0})", x)));
		var y = "x" + i;
	#>
    public static Func<<#= t #>Option<TResult>> OnExceptionNone<<#= t #>TResult>(this Func<<#= t #>Option<TResult>> func)
        {
            return <#= xarg #> => func.Curry()<#= xarg2 #>.OnExceptionNone()(<#= y #>);
        }

	<# } #>
}
}