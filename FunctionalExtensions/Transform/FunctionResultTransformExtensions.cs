//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using FunctionalExtensions.Currying;

namespace FunctionalExtensions.Transform
{
    public static class FunctionResultToOptionTransformExtensions
    {
	    public static Func<T1, Option<TResult>> ReturnOption<T1, TResult>(this Func<T1, TResult> func)
        {
            return (x1) => Option.Return(func(x1));
        }

	    public static Func<T1, T2, Option<TResult>> ReturnOption<T1, T2, TResult>(this Func<T1, T2, TResult> func)
        {
            return (x1, x2) => Option.Return(func(x1, x2));
        }

	    public static Func<T1, T2, T3, Option<TResult>> ReturnOption<T1, T2, T3, TResult>(this Func<T1, T2, T3, TResult> func)
        {
            return (x1, x2, x3) => Option.Return(func(x1, x2, x3));
        }

	    public static Func<T1, T2, T3, T4, Option<TResult>> ReturnOption<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, TResult> func)
        {
            return (x1, x2, x3, x4) => Option.Return(func(x1, x2, x3, x4));
        }

	    public static Func<T1, T2, T3, T4, T5, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, TResult> func)
        {
            return (x1, x2, x3, x4, x5) => Option.Return(func(x1, x2, x3, x4, x5));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6) => Option.Return(func(x1, x2, x3, x4, x5, x6));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15));
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Option<TResult>> ReturnOption<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) => Option.Return(func(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16));
        }

	}

	public static class FunctionResultNoneOnExceptionTransformExtensions
    {
		public static Func<T, Option<TResult>> OnExceptionNone<T, TResult>(this Func<T, Option<TResult>> func)
        {
            return x =>
            {
                try
                {
                    return func(x);
                }
                catch (Exception)
                {
                    return Option.None<TResult>();
                }
            };
        }

	    public static Func<T1, T2, Option<TResult>> OnExceptionNone<T1, T2, TResult>(this Func<T1, T2, Option<TResult>> func)
        {
            return (x1, x2) => func.Curry()(x1).OnExceptionNone()(x2);
        }

	    public static Func<T1, T2, T3, Option<TResult>> OnExceptionNone<T1, T2, T3, TResult>(this Func<T1, T2, T3, Option<TResult>> func)
        {
            return (x1, x2, x3) => func.Curry()(x1)(x2).OnExceptionNone()(x3);
        }

	    public static Func<T1, T2, T3, T4, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, Option<TResult>> func)
        {
            return (x1, x2, x3, x4) => func.Curry()(x1)(x2)(x3).OnExceptionNone()(x4);
        }

	    public static Func<T1, T2, T3, T4, T5, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5) => func.Curry()(x1)(x2)(x3)(x4).OnExceptionNone()(x5);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6) => func.Curry()(x1)(x2)(x3)(x4)(x5).OnExceptionNone()(x6);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6).OnExceptionNone()(x7);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7).OnExceptionNone()(x8);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8).OnExceptionNone()(x9);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9).OnExceptionNone()(x10);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10).OnExceptionNone()(x11);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11).OnExceptionNone()(x12);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12).OnExceptionNone()(x13);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13).OnExceptionNone()(x14);
        }

	    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Option<TResult>> OnExceptionNone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Option<TResult>> func)
        {
            return (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) => func.Curry()(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14).OnExceptionNone()(x15);
        }

	}
}