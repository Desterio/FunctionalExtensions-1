<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using FunctionalExtensions.Lambda;

namespace FunctionalExtensions.FluentOption
{
	<# 
	for(var i = 1; i <= 8; i++)
	{ 
        var t = String.Join(", ", Enumerable.Range(1, i).Select(x => "T" + x));
		var constructorParams = String.Join(", ", Enumerable.Range(1, i).Select(x => "Func<Option<T" + x + ">> f" + x));
		
		var fromParams = String.Join("", Enumerable.Range(1, i).Select(x => "_f" + x + ", "));
		var bindParams = String.Join(", ", Enumerable.Range(1, i).Select(x => "v" + x));
		var closingBraces = String.Join("", Enumerable.Range(1, i).Select(x => ")"));
	#>
    
	public class Intermediate<#=i#><<#=t#>> : IIntermediate<#=i#><<#=t#>>
	{
<# for (var j = 1; j <= i; j++) { #>
		private readonly Func<Option<T<#=j#>>> _f<#=j#>;
<# } #>

        public Intermediate<#=i#>(<#=constructorParams#>)
        {
<# for (var j = 1; j <= i; j++) { #>
			_f<#=j#> = f<#=j#>;
<# } #>
        }
<# if (i < 8) { #>
		public IIntermediate<#=i+1#><<#=t#>, TResult> From<TResult>(Func<Option<TResult>> f<#=i+1#>) {
			return new Intermediate<#=i+1#><<#=t#>, TResult>(<#=fromParams#>f<#=i+1#>);
		}

<# } #>
		public IIntermediate1<TResult> Bind<TResult>(Func<<#=t#>, Option<TResult>> selector)
        {
			var result = Fun.Create(() => _f1()
<# if (i==1) { #>
				.Bind(selector));
<# } else { #>
	<# for (var j = 1; j < i; j++) { #>
			.Bind((v<#=j#>) => _f<#=j+1#>()
	<# } #>			.Bind((v<#=i#>) => selector(<#=bindParams#>))<#=closingBraces#>
				;
<# } #>			
			return new Intermediate1<TResult>(result);
        }

		public IIntermediate1<TResult> Select<TResult>(Func<<#=t#>, TResult> selector)
        {
			var result = Fun.Create(() => _f1()
<# if (i==1) { #>
				.Select(selector));
<# } else { #>
	<# for (var j = 1; j < i; j++) { #>
			.Bind((v<#=j#>) => _f<#=j+1#>()
	<# } #>			.Select((v<#=i#>) => selector(<#=bindParams#>))<#=closingBraces#>
				;
<# } #>			            
			return new Intermediate1<TResult>(result);
        }

		public Option<T<#=i#>> Result()
        {
			return _f1()
<# for (var j = 1; j<=i; j++) { #>
				.Bind(x => _f<#=j#>())
<# } #>
				;
        }

	}
<# } #>

}
