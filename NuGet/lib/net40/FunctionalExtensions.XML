<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FunctionalExtensions</name>
    </assembly>
    <members>
        <member name="M:FunctionalExtensions.Operators.Id``1">
            <summary>
            Returns a function that always returns the same value that was used as its argument
            </summary>
            <typeparam name="T">Type of the identity function</typeparam>
            <returns>The identity function</returns>
        </member>
        <member name="M:FunctionalExtensions.Operators.Id``1(``0)">
            <summary>
            Always returns the same value that was used as its argument
            </summary>
            <typeparam name="T">Type of the argument</typeparam>
            <param name="value">The argument</param>
            <returns>The value that was used as its argument</returns>
        </member>
        <member name="T:FunctionalExtensions.Option`1">
            <summary>
            Union type with two cases: Some and None
            </summary>
            <typeparam name="T">Type of the contained value</typeparam>
        </member>
        <member name="M:FunctionalExtensions.Option`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Pattern matching for the option type
            </summary>
            <typeparam name="TResult">Type of the return value</typeparam>
            <param name="onSome">Function that will be invoked if the option is Some</param>
            <param name="onNone">Function that will be invoked if the option is None</param>
            <returns>The result of the invoked function</returns>
        </member>
        <member name="P:FunctionalExtensions.Option`1.Tag">
            <summary>
            Specifies wether the option is Some or None
            </summary>
        </member>
        <member name="T:FunctionalExtensions.Option">
            <summary>
            Union type with two cases: Some and None
            </summary>
        </member>
        <member name="M:FunctionalExtensions.Option.None``1">
            <summary>
            Returns None
            </summary>
            <typeparam name="T">Type of the contained value</typeparam>
            <returns>None</returns>
        </member>
        <member name="M:FunctionalExtensions.Option.Some``1(``0)">
            <summary>
            Returns Some&lt;T&gt;
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The contained value</param>
            <returns>Some</returns>
        </member>
        <member name="M:FunctionalExtensions.Option.Return``1(``0)">
            <summary>
            Returns Some&lt;T&gt;
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The contained value</param>
            <returns>Some</returns>
        </member>
        <member name="T:FunctionalExtensions.OptionType">
            <summary>
            Valid cases for the option type
            </summary>
        </member>
        <member name="F:FunctionalExtensions.OptionType.None">
            <summary>
            No value
            </summary>
        </member>
        <member name="F:FunctionalExtensions.OptionType.Some">
            <summary>
            Option has a value
            </summary>
        </member>
        <member name="T:FunctionalExtensions.Unit">
            <summary>
            This type represents void
            </summary>
        </member>
    </members>
</doc>
